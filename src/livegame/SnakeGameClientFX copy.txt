package livegame;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.concurrent.ConcurrentHashMap;

public class SnakeGameClientFX extends Application {
    private static final int TILE_SIZE = 20;
    private static final int GRID_WIDTH = 20;
    private static final int GRID_HEIGHT = 20;

    private ConcurrentHashMap<String, int[]> playerPositions = new ConcurrentHashMap<>();
    private int[] myPosition = {10, 10}; // Starting position of this player's snake
    private String playerId = "PLAYER_" + System.currentTimeMillis();
    private PrintWriter out;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Multiplayer Snake Game");

        Canvas canvas = new Canvas(GRID_WIDTH * TILE_SIZE, GRID_HEIGHT * TILE_SIZE);
        GraphicsContext gc = canvas.getGraphicsContext2D();

        StackPane root = new StackPane(canvas);
        Scene scene = new Scene(root);
        primaryStage.setScene(scene);
        primaryStage.show();

        scene.setOnKeyPressed(event -> {
            if (event.getCode() == KeyCode.UP) myPosition[1] -= 1;
            if (event.getCode() == KeyCode.DOWN) myPosition[1] += 1;
            if (event.getCode() == KeyCode.LEFT) myPosition[0] -= 1;
            if (event.getCode() == KeyCode.RIGHT) myPosition[0] += 1;

            sendPosition();
        });

        // Start rendering loop
        new Thread(() -> {
            while (true) {
                Platform.runLater(() -> render(gc));
                try {
                    Thread.sleep(100); // Adjust game speed here
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }).start();

        // Connect to the server
        connectToServer();
    }

    private void connectToServer() {
        try {
            // Attempt to connect to the server
            Socket socket = new Socket("localhost", 12345); // Replace with the correct server address if needed
            out = new PrintWriter(socket.getOutputStream(), true);
            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
    
            System.out.println("Connected to the server!");
    
            // Send initial position to server
            sendPosition();
    
            // Listen for updates from the server
            new Thread(() -> {
                try {
                    String message;
                    while ((message = in.readLine()) != null) {
                        // Check if the message contains the ':' separator
                        if (message.contains(":")) {
                            String[] parts = message.split(":");
                            if (parts.length == 2) {
                                String id = parts[0];
                                String[] coords = parts[1].split(",");
                                
                                // Ensure there are at least 2 coordinates
                                if (coords.length == 2) {
                                    int x = Integer.parseInt(coords[0]);
                                    int y = Integer.parseInt(coords[1]);
                                    playerPositions.put(id, new int[]{x, y});
                                } else {
                                    System.out.println("Invalid coordinates format: " + parts[1]);
                                }
                            } else {
                                System.out.println("Invalid message format: " + message);
                            }
                        } else {
                            System.out.println("Invalid message received: " + message);
                        }
                    }
                } catch (Exception e) {
                    System.out.println("Error reading from server: " + e.getMessage());
                    e.printStackTrace();
                }
            }).start();
    
        } catch (Exception e) {
            System.out.println("Error connecting to server: " + e.getMessage());
            e.printStackTrace(); // Print the full stack trace for debugging
        }
    }
    

    private void sendPosition() {
        if (out != null) {
            out.println(playerId + ":" + myPosition[0] + "," + myPosition[1]);
        }
    }

    private void render(GraphicsContext gc) {
        // Clear the canvas
        gc.setFill(Color.LIGHTGRAY);
        gc.fillRect(0, 0, GRID_WIDTH * TILE_SIZE, GRID_HEIGHT * TILE_SIZE);

        // Draw all players
        for (String id : playerPositions.keySet()) {
            int[] pos = playerPositions.get(id);
            if (id.equals(playerId)) {
                gc.setFill(Color.BLUE); // Your snake
            } else {
                gc.setFill(Color.GREEN); // Other players
            }
            gc.fillRect(pos[0] * TILE_SIZE, pos[1] * TILE_SIZE, TILE_SIZE, TILE_SIZE);
        }
    }
}
